오류의 종류
	에러(Error) : 개발자가 해결할 수 없는 문제(코드로 수습 불가)
	예외(Exception) : 개발자가 해결할 수 있는 문제 (코드로 수습 가능)

예외의 발생 시점
	확인된 예외(Checked Exception)
		컴파일 단계에서 발생하는 예외(이클립스 빨간 밑줄)
	미확인 예외(Unchecked Exception)
		프로그램 실행(런타임)중 발생하는 예외

예외 처리
	예상되는 예외를 적절한 처리를  하여 비정상적인 종료를 막는다.

예외처리 문법
	try{
		실행할 문장
	}catch(예외이름 변수명){
		예외를 처리하는 명령문
	}
	catch(예외이름 변수명){
		예외를 처리하는 명령문
	}
	catch(예외이름 변수명){
		예외를 처리하는 명령문
	}
	...
	}finally{
		오류 발생여부에 상관없이 무조건 실행할 코드
	}
	**catch는 위에서부터 검사하므로 위에서 예외가 잡히면 다른 catch문은 건너뛰고 finally가 실행된다.

자바의 오류
	자바에서는 런타임 시 발생할 수 있는 오류를 클래스로 정의해 두었다.
	즉 오류가 발생하면 해당 오류 클래스의 객체가 생성되고 (메모리에 할당)
	그 객체의 주소를 catch(예외클래스명 참조변수명)의 참조변수가 받게 된다.
	예외클래스에는 다양한 기능을 제공한다.

예외클래스에서 제공하는 메소드
	1. getMessage(): 예외메세지를 문자열로 반환함
	2. printStackTrace(): 예외가 발생한 지점을 추적하여 단계별로 출력
	3. toString(): 발생한 예외객체를 문자열로 반환함
	**toString()은 생략 가능함

  우리가 try에서 어떤 오류가 발생할 것인지 예상하기 힘들다. 예상치 못한 오류가 발생할 수 있는데
 예상치 못한 오률ㄹ 잡기위해 Exception 타입의 변수를 사용한다.
 모든 예외의 조상은 Exception 클래스이다.
 즉 어떤 예외가 발생하더라도 Exception 타입의 참조변수에 저장가능하다.(업캐스팅)

throw와 throws
	throws : 예외던지기 , 메소드의 선언부 사용한다.
	메소드에서 발생할 수 있는 오류를 메소드를 정의할 때 처리하지않고 해당 메소드를 사용하는 쪽으로 던져서 
	메소드를 사용하는 개발자가 처리하도록 한다.
	(상황에 맞게 처리하기 위해서)
	ex) void method() throws Exception{}


	throw : 예외를 발생시킨다.
	ex) throw new 예외명();

사용자 정의 예외
	public class 예외명 extends Exception{
		생성자(){
			super("사용자 정의 예외메세지");
		}
	}

API (Application Programing Interface)
	어플리케이션 개발에 필요한 것들을 가져다 사용할 수 있게 해주는 매개체
	개발에 필요한 라이브러리들의 집합

내부 API
	JDK 설치 시 기본으로 제공해주는 API
	자바로 어플리케이션을 쉽게 구현할 수 있도록 한 라이브러리 집합
	docs.oracle.com/javase

외부 API
	선배개발자들이 개발한 패키지 및 클래스들을 의미
	보통 JAR파일로 배포하여 자바프로젝트에 build path에 추가하여 사용한다.

외부 API Build Path 추가하는 법
	배포 된 jar 파일 다운 받기
	> 프로젝트 우클릭 > build path > configure build path > libraries 클릭 
	> add External jars 클릭 > 저장된 경로의 .jar 파일 추가 > apply > odre and export 클릭 
	> select all 클릭 > apply and close 클릭