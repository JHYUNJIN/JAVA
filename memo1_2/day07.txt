2. Set 인터페이스
set : 집합
	데이터의 순서를 보장하지 않는다.
	데이터의 중복을 허용하지 않는다.

구현 클래스

HashSet
	Set인터페이스를 구현한 가장 대표적인 클래스
	중복되는 값을 저장하면 무시한다.
	인덱스가 존재하지 않아 순서를 보장하지 않는다.
	ArrayList나 배열처럼 값을 가져오는게 불가능하다.
	hashCode()가 반환하는 해시코드를 이용하여 데이터를 처리하며 속도가 상태적으로 빠르다.
	값의 존재여부를 파악할 때 사용하기 좋다.
Hashset 주의 사항
	HashCode()를 사용하는 HashSet에 객체를 저장할 때

Iterator
	컬렉션에 저장된 데이터들을 컬레션의 종류와 상관없이 동일한 방식으로 가져오기 위한 인터페이스
	어떤 자료구조든 Iterator로 변환하면 Iterator만의 방식으로 순서를 만들고 값을 가져올수있다.
	값의 유무를 검사하거나 값을 가져올떄는 커서를 이용한다.

Iterator()
	ArrayList, Hashset 등의 컬렉션 객체를 Iterator 타입으로 변환할 때 사용하는 메소드

hasNext()
	다음 값의 유무를 검사하여 boolean타입으로 반환한다.
next()
	다음 값을 가져온다. 아무 값도 없다면 예외가 발생한다.



3. Map 인터페이스 (파이썬의 dict와 비슷한거같음)
	-키와 값이 한쌍으로 이루어지는 데이터의 집합으로 순서가 없고, 키는 중복으로 허용하지 않지만 값은 중복을 허용한다.

HashMap, TreeMap, HashTable
HashMap 클래스
-Map 인터페이스를 구현한 대표적인 클래스
-키와 값으로 구성된 요소 객체를 저장하는 구조를 가지고 있는 자료 구조
-키는 중복될 수 없고, 값은 중복될 수 있다.
-기존에 저장된 키와 동일한 키와 값을 저장하면 기존의 값은 없어지고 새로운 값으로 대체된다.
-해싱(Hashing)을 사용하기 때문에 많은 양의 데이터를 검색하는데 뛰어난 성능
-비동기식

TreeMap 클래스
-이진트리를 기반으로 한 Map 컬렉션
-TreeSet과의 차이점은 TreeSet은 값만 저장하는 구조라면 TreeMap은 키와 값이 저장된 key, value를 저장
-키는 오름차순으로 정렬됨 (숫자:값, 문자열:유니코드)
-HashMap보다 성능이 떨어짐 (데이터를 저장할 때, 삭제할 때)
-검색이 필요한 경우 효율성 면이 좋음


배열과 리스트의 차이점
크기 , 타입, 삭제, 포함여부 검사, 수정