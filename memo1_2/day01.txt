다형성(polymorphism)
	1. 오버로딩
		같은 클래스 내에서 같은 이름의 메소드를 불러올 때 매개변수의 타입이나
		갯수를 다르게 하는 것
	2. 오버라이딩 (알트 쉬프트 s v)
		부모 클래스의 정의한 메소드를 자식 클래스에서 수정하여 사용하려면
		오버라이딩 하면 된다.
		이 때, 메소드명, 매개변수, 반환타입은 부모의 메소드와 동일해야한다.



RPG게임
      1. 마법사      2. 전사      3. 로그

      hp/mp      hp/mp      hp/mp
      15/30      30/10      20/20

1. 일반공격
      1만큼 피해      5만큼 피해      3만큼 피해
      hp -2            mp -3

2. 스킬공격
      30만큼 피해      15만큼 피해      20만큼 피해
      mp -10      mp -3      hp-5,mp-2
3. 특수공격
      3초동안 기다렸다가   5초동안 기다렸다가    1초동안 기다림
      100 피해      100 피해      20~100랜덤
      mp, hp -10   hp -10      피해

접근 권한 제어자 (접근자)
	주로 클래스의 멤버에 접근을 제어하기 위해 사용한다.

	default: 다른 패키지에서 접근이 불가(접근제어자 생략 시 자동으로 default가 된다.)
	public: 모든 곳에서 접근이 가능하다. 대표 클래스를 의미할 때 사용
	protected: 다른 패키지에서 접근 불가, 자식은 허용
	private: 다른 클래스에서 접근 불가, 메소드로만 접근가능(getter, setter)

Casting
	업캐스팅 : 자식값을 부모타입으로 형변환

	다운캐스팅 : 업캐스팅 된 객체를 자식타입으로 형변환
	*부모 값을 자식타입으로 형변환 시 오류
		자식 클래스 타입의 객체는 부모 클래스의 타입도 동시에 갖는다.

Casting을 사용하는 이유
	부모 타입인 하나의 저장공간에 여러 자식타입의 참조값을 업캐스팅하여 저장 할 수 있다. ( 참조변수의 다형성)
	만약 하나의 기능을 하는 메소드를 만들 때 매개변수로 여러 자식타입을 받아야 한다고 가정했을 때, 캐스팅이 없었다면 자식 타입을 매개변수로 받는 메소드를 타입별로 각각 만들어야 한다.(자식끼리는 타입이 다르기 때문에)
	캐스팅을 활용하면 부모타입의 매개변수를 가진 하나의 메소드만 만들면 된다.
	(부모 타입의 참조변수로 모든 자식타입을 저장 할 수 있다.)

	** 주의 사항
	1. 업캐스팅으로 자식참조값을 저장했다면 자식클래스에 오버라이드(재정의)한 기능이 실행된다.
	2. 업캐스팅으로 자식참조값을 저장했다면 자식클래스에 새로 구현한 기능들을 사용할 수 없다. 이 경우에는 다운캐스팅을 통해 복구해줘야한다.
























