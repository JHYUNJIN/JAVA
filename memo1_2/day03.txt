내부클래스 (Inner Class)
	캡슐화와 내부은닉화를 위해 사용한다.
	클래스 내부에 선언된 클래스를 내부클래스라고 한다.
	내부클래스를 가진 클래스를 외부클래스라고 한다.
	클래스를 구성하는 멤버로 변수, 메소드, 생성자 뿐만 아니라 클래스도 가질 수 있다.
	만약 B클래스를 A클래스에서만 사용한다면, B클래스에 내부클래스를 만들어 사용한다.

	외부클래스가 메모리에 할당되어야 내부클래스의 객체화가 가능하기 떄문에
	(내부클래스)B를 별도로 사용하지 못한다.
	내부클래스는 외부클래스의 멤버이기 떄문에 외부클래스의 멤버를 상속없이 사용할 수 있다.
내부 클래스의 종류
	인스턴스	내부클랙스
	스태틱	내부클랙스
	로컬 	내부클래스

익명클래스 (Annonymous Class)
	이름이 없는 클래스 == 일회성 클래스
	미구현된 멤버를 구현하여 일회용으로 객체를 생성하기 위해 사용한다.

함수형 인터페이스(Functional Interface)
	단 하나의 추상 메소드를 가지고 있는 인터페이스
	@FunctionalInterface라는 어노테이션을 명시해주면 
	하나의 추상메소드만 선언할 수 있도록 제한 할 수 있다.

람다식(Lambda Expression) : 익명 메소드 (화살표 메소드라고 하며 -> 로 표현한다.)
	자바 8버전부터 사용가능하다.
	메소드를 하나의 식으로 표현한다.
	람다식을 매개변수로 사용 가능하며 반환도 가능하다.

	함수형 인터페이스는 추상메소드가 한개만 선언되기 떄문에 재정의 할 때 메소드 이름이 필요없다
	
// 식(expression)과 문(statement)의 차이
	
	// 식은 결과가 값이다.
	// 식은 값이기 때문에 변수에 저장할 수 있고 매개변수로 넘겨줄 수 있다.
	
	// 문은 ; 으로 끝난다.(명령문)
	// 문은 값이 아니기 때문에 변수에 저장할 수 없고 매개변수로 넘겨줄수 없다.
	// 문은 식을 포함할 수 가 있다.

람다식 문법
	매개변수 -> 바디

	1.(매개변수명,...) -> 명령문;
		명령문의 결과가 값이라면 자동 반환됨
	2.(매개변수명,...) -> {
		명령문1;
		명령문2;
		명령문3;
	}
	반환값이 있다면 return을 사용