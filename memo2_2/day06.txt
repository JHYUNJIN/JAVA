API (Application Programming Interface)
	개발에 필요한 라이브러리들의 집합
	선배 개발자들이 만들어 놓은 소스코드

	- 내부 API
		JDK 설치 시 제공해주는 기본 API
		docs.oracle.com/javase

	- 외부 API
		선배 개발자들이 개발한 패키지 및 클래스들을 의미한다.
		보통 JAR파일로 배포하며 자바 프로젝트의 buildPath에 추가하여 사용할 수 있다.

JAR 파일로 배포하기
	배포할 클래스 또는 패키지 우클릭
	> Export > JAVA/JAR file 선택 > Next
	> destination을 원하는 경로로 선택
	> Export Java source files ... 체크
	> Finish

JAR 파일을 프로젝트에 추가하기
	배포된 JAR파일을 다운 받기
	> 프로젝트 우클릭 > Build Path > Configure Build Path
	> Libraries 탭 클릭 > ClassPath(안되면 ModulePath) 클릭 > Add External JARs
	> 저장된 경로의 .jar파일을 더블 클릭으로 추가 > Apply 클릭
	> Orders and Exports 탭 클릭
	> Select All 클릭 > Apply and Close
-------------------------------------------------------------------------------------
Object 클래스 (최상위 부모 클래스, 모든 클래스는 자동으로 Object를 상속받는다.

	1. toString()
		항상 객체명을 출력할 때에는 toString()이 생략되어 있다.
		toString()을 통해 출력되는 문자열이 마음에 들지 않는다면, 재정이하여 수정할면 된다.
		실무에서는 클래스 선언 시 각 필드의 초기화 여부를 확인하기 위해 toString을 재정의하여 사용한다.
	
	2. equals()
		주소값 비교(==)
		String 클래스에서 equals()를 값 비교로 재정의하여 사용하기 때문에
		무낮열 비교는 무조건 equals()로 비교한다.
		
	3. hashCode()
		JVM에서 관리하는 중복없는 값. 실제 메모리에 할당되는 주소와 다르다.
		JVM은 주소를 관리해주는 프로그램이다.
		String 클래스에서는 필드의 해시코드값이 아닌 필드 안에 있는 
		문자열 상수값의 해시코드값을 리턴하도록 재정의 되어있다.
		

Constant Pool
	상수가 넘쳐나는 영역이라는 뜻
	문자열 자체를 넣으면 "ABC"가 이미 있으면 또 만들지 않고 주소값을 공유함
	그래서 == 그리고 equals 둘 다 true가 출력된다.
	
	선언을 그냥 값을 넣어주는 걸로 하면 우선순위가 상수의 주소 비교가 높아서 값을 넣는 걸
	알려준게 아닌 생성자로 필드를 만들어 알려줌
	
	new로 만들어주면 필드 비교의 우선순위가 높아져서 false가 나온다.
-----------------------------------------------------------------------------------------

Wrapper Class : 기본 자료형들의 클래스 타입
	클래스타입 객체 = new 클래스타입(일반타입의 값); // boxing 권장하지 않음. 옛날문법임
박싱	클래스타입 객체 = 클래스타입.valueOf(일반타입의 값); // boxing,  
언박싱	일반타입 변수 = 객체.자료형Value(); // unboxing

	클래스타입 객체 = 일반타입의 값; auto boxing, ex) Integer i = 4;
	일반타입 변수 = 객체; // auto unboxing

Wrapper Class를 사용하는 이유
	원시타입(일반타입)을 박싱하면 다양한 메소드를 제공받을 수 있다.
	여러 일반 타입을 하나의 타입으로 묶기 위해서는 
	반드시 클래스 타입(Wrapper Class)으로 사용해야 하고, 이 때 박싱을 해주면 되는 것이다.

















