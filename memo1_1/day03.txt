6) 연산자
---------------------------------------
제어문자 (Escape String)
	- 문자열" " 안에서 사용되며 미리 예약된 특수한 기능을 하는 문자
	- \ (역슬래쉬)를 사용한다.
\n : 줄빠꿈
\t : 일정간격 띄워준다
\" : 문자열 안에 큰 따옴표를 표현
\': 문자열 안에 작은 따옴표를 표현
\\ : 문자열 안에 역슬래쉬를 표현

출력 메소드의 종류
	괄호 안에 있는 값을 콘솔창에 출력함
	println() : 전달된 값을 출력하고 줄 바꿈이 된다.
	print() : 전달된 값을 출력하고 줄 바꿈이 되지 않는다.
	printf() : 형식(서식format)에 맞는 값을 출력하고 줄바꿈이 되지 않는다.
출력 메소드의 목적
	개발자가 오류를 해결하기 위해 값을 확인할 때 사용한다.
형식지정자(서식 문자)
	-출력 형식을 지정한다.
	-&로 시작하며 printf()에서 사용한다.
	-반드시 큰따옴표 안에서 작성한다.
	-' , '(콤마) 뒤에 나오는 값이 형식 지정자(서식문자) 위치로 들어가게 된다.

자료형(type)				형식 지정자(서식문자)
	int				%d --> decimal(10진수 정수)
					%o --> octal(8진수 정수)
					%x --> hexadecimal(16진수 정수)

	double			%f --> float(실수)
	char				%c --> character(문자)
	String			%s --> String(문자열)

연산자의 우선순위
	하나의 수식에 여러개의 연산자를 사용하면 어떤 연산이 먼저 되는지를 구분한다.

	최 - 최우선 연산자
	단 - 단항 연산자
	산 - 산술 연산자
	쉬 - 쉬프트 연산자
	관 - 관계 연산자
	리 - 논리 연산자
	삼 - 삼항 연산자
	대 - 대입 연산자
결합성
	하나의 수식에 동일한 연산자가 여러 개 사용되면 알맞은 방향으로 결합되는 연산의 성질			


산술 연산자
	+
		String : 연결
		int, double : 연산
	-
		String : 사용불가
	/
		String : 사용불가
		int/int --> int(몫)
	*
		String : 사용불가
	% 나머지 연산자
		10%3 --> 1

비트연산
	논리 연산자
		&	(and,논리곱) : a&b, 두 비트 모두 1 이면 1
		|	(or,논리합) : a|b, 둘 중 하나라도 1이면 1
		^	(xor, 배타논리합) : a^b, 두 비트가 다르면 1
	단항 연산자
		~	(not, 논리부정) : ~a 0은 1로, 1이면 0dmfh
	쉬프트 연산자
		<<	(left shift, 좌쉬프트)
			a<<b a를 b만큼 좌로 비트이동
		>>	(right shift, 우쉬프트)
			a<<b a를 b만큼 우로 비트이동

삼항 연산자 (? :)
	조건식 ? 참 : 거짓
	참과 거짓자리에 값만 작성 할 수 있다.

조건식 
	결과가 참 또는 거짓, 둘 중 하나가 나오는 식
	
	관계 연산자
		==	:같다
		!=	: 같지 않다
		>, <	: 초과, 미만
		>=, <=: 이상, 이하

	논리 연산자
	&&(AND) : A && B, 두 조건식 모두 참이면 참
	||(OR)   : A||B, 두 조건식 중 하나만 참이면 참

	단항 연산자
	!(NOT) : !A, 조건식이 참이면 거짓으로, 거짓이면 참으로 변경
		true --> false, false --> true	  


제어문
-조건문
1) if문 : 비교연산 또는 조건식이 여러가지일 때 사용
	- if 만 사용 : 모든 조건식을 검사
	- else if : 위의 조건식이 거짓일 때 검사, 
			위의 조건식이 참이면 검사하지 않음
			여러개를 작성 할 수 있다.
	- else : 위의 조건식이 모두 거짓이면 실행
	
	else if 와 else는 if 없이 사용이 불가능하다.

	if(조건식){
		실행할 문장
	}
	if(조건식){
		실행할 문장
	}
	if(조건식){
		실행할 문장
	}
-----------------------------------
	if(조건식){
		실행할 문장
	}
	else if(조건식){
		실행할 문장
	}
	else if(조건식){
		실행할 문장
	}
	...
	else(조건식){
		실행할 문장
	}



2) switch문 (값을 비교할 때 주로 사용) : 값을 비교할 때 주로 사용
	swich(변수명){
	case 값1:
		실행할문장;
		break;
	case 값2:
		실행할문장;
		break;
	case 값3:
		실행할문장;
		break;
	defult:
		실행할문장;
	}

삼항 연산자 , if문 , switch문의 비교
	삼항 연산자 : 조건식이 1개 잇을 경우 사용
	if : 조건식에서 비교 (>, <, >=, <=) 연산자를 사용하거나
		여러 개의 조건식을 사용할 때 사용
	switch : 하나의 변수에 여러개의 값이 담길 수 있고, 각 값을 비교할 때 사용


반복문
-for문 (몇번 반복할 지 알고있을 때 for문 사용)
	for(초기식; 조건식; 증감식){
		실행할 문장
	}
	for(int i=0; i<10; i=i+1){
		실행할 문장
	
	}

-while문 (몇번 반복할 지 모를 때 while문 사용)
	while(조건식){
		실행할 문장;
	}
-do~while문 : 최소 한번은 무조건 실행해야 할 때
	do{
		실행할문장;
	}while

대입 연산자 - 복합 대입 연산자(누적 연산자)
		+=,-=,*=,/=,%=,...
		
		int money = 1000;
		money += 1000;
		syso(money);

		money -= 500;
		syso(money);

증감 연산자
		++,--
		
		전위형 : 해당 라인부터 바로 적용
		++i, --i
		
		후위형 : 다음 라인부터 적용(정확히는 증감연산자가 끝난 다음 시점부터 적용)
		i++, i--
기타 제어문
	반복문에서 사용한다. 단, break는 switch에서도 사용가능하다.
	break : 즉시 해당 중괄호 영역을 탈출한다.
		if문은 적용되지 않는다.
		(if문 안에서 사용시 if문을 감싸고 있는 중괄호 영역을 탈출한다.)
		-아래 코드를 실행시키지 않는다.
	continue : 즉시 다음 반복으로 넘어간다.
		-아래 코드를 실행시키지 않는다.

for문과 while문의 목적
	for : 몇번 반복할지 알 때
		ex) 음식이 나오면 진동벨 5번 울린다.
	while : 몇번 반복하지 모를 때
		ex) 키오스크로 주문을 하면 다시 메인화면으로 돌아간다.


배열(Array) : 저장공간의 나열
	1. 변수를 여러개 선언하면 이름도 여러개 생긴다.
		--> 각 저장공간을 관리하기가 불편하다.
	2. 규칙서이 없는 값에 규칙성을 부여하기 위해서 사용한다.(index)

변수 : [] 하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간
배열 : [][][][][][] 하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간의 나열

배열의 선언
	자료형[]배열명 = {값1,값2,...} // 어떤 값을 넣을지 알 때
	int[] ar = {1,2,3,4,5};

	자료형[]배열명 = new 자료형[칸수]; // 어떤 값을 넣을지 모르지만, 몇칸 만들지 알 때
	int[] ar = new int[5];

	자료형[]배열명 = null; // 무슨값을 넣을지 모르고 몇칸 만들지도 모를 때
	int[] ar = null;

new : Heap 메모리에 할당, 저장공간의 시작주소를 가져온다
null : 주소의 기본값(어떤 주소가 들어갈지 모를때 사용)
































