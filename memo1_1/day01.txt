1) 개발환경 준비
	-자바 설치
	-이클립스 설치
2) 자바의 구성
3) 출력 메소드
4) 주석 처리
5) 변수
	-변수 선언과 초기화
	-데이터 타입
----------------------------------------------
자바 설치 여부 확인
window + r > java > java -version
			javac -version
>>>설치 및 버전확인
자바 설치
	구글 > jdk11 > 최상단 링크 클릭 > 쿠키(승인 거절 아무거나)
	> 하단에 Java SE Development Kit 11.0.15
	> windows x64 Installer(macOx x64 DMG Installer)

이클립스 설치
	구글 > eclipse > 최상단 링크 접속 > 화면중앙 Download Packages > Eclipse IDE Enterprise Java and Web Developers 설치
이클립스 설치가 잘 안되었을 시 이클립스 자바 환경변수 확인해보기 (구글링)

인텔리J
	인텔리J IDEA 개발환경 다운로드
-------------------------------------------------
IDE(통합개발환경)
	개발의 편의성을 높이기 위해 사용하는 툴
이클립스 >
	무료이다.
	많은 기능과 다양한 단축키를 제공하여 개발의 편의성을 높여준다.
프로그래밍 언어
	컴퓨터와 개발자가 소통하기 위한 언어
소스 코드
	프로그래밍 언어를 작성해 놓은 것
JAVA
	JVM(Java Virtual Machine) : 가상컴퓨터로서 메모리 관리를 수행
		JAVA로 만든 프로그램을 실행한다.

	JRE(Java Runtime Enviroment) : 실행시켜 줌
		JVM을 포함한다.
		JVM에서 실행할 때 필요한 라이브러리 파일 등을 가지고 있다.

	JDK(Java Development Kit) : 개발도구
		JRE를 포함한다.
		JRE외에 개발에 필요한 도구들을 가지고 있다.

JAVA SOURCE CODE를 쓰기 위한 과정
	프로젝트 > 패키지 > 클래스 > 메소드 > 소스코드(명령어)

프로젝트 폴더 생성
	ctrl + n > java project > 프로젝트 이름 설정 > 모듈 체크 해제 > finish
패키지 생성
	ctrl + n > package > 패키지 이름 설정 > finish
클래스 생성
	ctrl + n > class > 클래스 이름(앞글자는 대문자) 설정 > finish
메소드 생성
	클래스의 중괄호 {} 안에서 main 이라고 쓰고 ctrl + space
메소드
	이름 뒤 소괄호()가 있는 대부분의 명령어(예외인 것도 있음)
	키워드 뒤에 ()가 있는 명령어는 메소드가 아니다.

단축키
	main ctrl spacebar
	syso ctrl spacebar
	컨트롤 쉬프트 f 자동 들여쓰기


메인 메소드
	자바 프로그램이 실행되면 가장 먼저 실행되는 메소드
	프로그램이 시작되는 시작점
출력 메소드
	println()
	괄호 안에 있는 것(값)을 콘솔 창에 출력함
	System.out.println("출력할 내용");
들여쓰기
	자바에서 들여쓰기는 코드에 영향을 주지 않는다.
	가독성을 높이기 위해 사용한다.
	자동 들여쓰고 ctrl + shift + f
중괄호 {}
	자바에서 중괄호 {}로 영역을 표시
세미콜론 ;
	자바에서는 세미콜론 ;으로 문장의 끝을 표시한다.
주석 : 사람이 사람에게 설명하기 위한 코드로서 컴파일 시 제외된다.
	잠시 컴파일에서 제외시키고 싶을때도 자주 사용
	// : 라인 주석
	/* ... */ : 범위 주석
	ctrl shift / : 범위 주석
	ctrl shift \ : 범위 주석
컴파일러
	번역기(컴파일 해준다)
컴파일
	사람의 언어를 컴퓨터 언어로 번역해주는 작업


변수(Variable)란 ?
	값을 저장하기 위한 저장공간
변수의 특징(제약조건)
	1. 변수는 오직 하나의 자료형(data type)만 저장할 수 있다.
	2. 변수는 오직 하나의 값만 저장할 수 있다.

** 정리
	변수란 하나의 자료형과 하나의 값만 저장 할 수 있는 저장 공간.
변수의 선언과 사용
	-변수의 선언 (변수를 만든다.)
		자료형 변수명;
		ex) 숫자 a;
	-변수에 값을 저장하는 방법
		변수명 = 값;
		* 대입연산자(=) : 오른쪽의 값을 왼쪽에 저장한다.
		ex) a=3;
	-선언과 동시에 초기화 (처음으로 값을 저장하는 것)
		자료형 변수명 = 값;
		ex) 숫자 a =3;

		변수에 저장된 값을 사용하는 방법
		변수명을 이용한다.

		여러개의 변수를 선언하는 방법
		자료형 변수명1, 변수명2, 변수명3, .....;
변수의 사용방법
	a=10 (저장할 공간으로 사용)
	a    (저장된 값으로 사용)

변수 선언 시 주의 사항
	- 같은 영역에서 같은 이름으로 변수를 선언할 수 없다.
	- 소스코드 위쪽에 한꺼번에 선언한다.
	- 선언과 동시에 초기화를 한다.
변수명 주의 사항
	- 문자부터 시작한다.
	- 특수문자를 사용 할 수 없다 (단 & _ 는 가능)
	- 키워드(예약어)를 사용 할 수 없다.
	- 소문자로 시작하자(대소문자를 구분)
	- 의미없는 문자를 사용하지 않는다.
	- 한글은 사용하지 않는다.
	ageNumber : 카멜표기법
	age_numer : 팟홀표기법, 스네이크 표기법
RAM
	int number;
	number라는 이름의 저장공간이 RAM에 할당된다.
주소값
	메모리(RAM)에 저장공간이 할당되면 고유한 값인 주소값이 부여된다.
자료형(data type) : 값의 종류
자료형		type		byte	값
정수형		int		4	3, 5, -123, ...
		long		8	3L, 5L, -123L, ...
실수형		float 	4	3.0F, 12.12F, -123,123F, ...
		double	8	3.0, 12.12, -123.123, ...
문자형		char		2	'a', 'A', '가', '0'
논리형		boolean	1	true, false
문자열		string	??	"abc", "가나다", "012345", ...
--------------------------------------------------------------
문자
	작은 따옴표(싱글쿼터)로 감싸진 1개 이상의 문자
문자열
	큰 따옴표(더블쿼터)로 감싸진 0개 이상의 문자
제어문자 (Escape String)
	- 문자열 안에서 사용되며 미리 예약된 특수한 기능을 하는 문자
	- \ (역슬래쉬)를 사용한다.
변수를 사용하는 이유(값을 왜 변수에 저장해서 사용하는가 ?)
	1. 반복되는 값을 쉽게 관리하기 위해서 (값을 재사용하기 편함)
	2. 값의 의미 부여를 하기 위해서
----------------------------------------------------------
형변환
	-자동 형변환
		정수 + 실수 = 실수
		정수 + 정수 = 정수

	-강제 형변환
		(double)11/9
		(char)('A'+1) 
1. 다른 자료형을 문자열로 문자열과 다른 자료형을 연결하면 결과는 항상 문자열이 된다.
기본자료형(원시자료형) : int, double, float, boolean, char
참조자료형 : String 
	ex) int("3") 안된다.
2. 문자열을 다른 자료형으로
		일반 자료형은 일반 자료형끼리 형변환이 되고 클래스타입은 클래스타입끼리 형변환이 된다.
		따라서 문자열을 정수, 실수로 변경하기 위해서는 Integer, Double 클래스의 메소드를 사용해야 한다.
		Integer.parseInt("2");
		Double.parseDouble("3.5");
함수 (클래스 밖에서 만든다.)
	어떤 기능을 하는 것
	이름 뒤에 ()가 있다.
메소드 (클래스 안에서 만든다.)
	함수와 같다.
	JAVA에서 모든 함수는 클래스 내부에 만들어지므로 메소드라고 말한다.
입력 클래스
	Scanner sc = new Scanner(System.in);
입력 메소드
	next() : 입력 받은 값을 String 타입으로 돌려준다.
			입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다.
	nextLine() : 입력 받은 값을 String타입으로 돌려준다.
			띄어쓰기, 엔터도 값으로 입력된다. 한줄 전체를 입력받는다.
	nextInt() : 입력 받은 값을 int 타입으로 돌려준다.
	nextDouble() : 입력받은 값을 double 타입으로 돌려준다.