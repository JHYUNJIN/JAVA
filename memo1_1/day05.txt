배열(Array) : 저장공간의 나열
	1. 변수를 여러개 선언하면 이름도 여러개 생긴다.
		--> 각 저장공간을 관리하기가 불편하다.
	2. 규칙서이 없는 값에 규칙성을 부여하기 위해서 사용한다.(index)

변수 : [] 하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간
배열 : [][][][][][] 하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간의 나열

배열의 선언
	자료형[]배열명 = {값1,값2,...} // 어떤 값을 넣을지 알 때
	int[] ar = {1,2,3,4,5};

	자료형[]배열명 = new 자료형[칸수]; // 어떤 값을 넣을지 모르지만, 몇칸 만들지 알 때
	int[] ar = new int[5];

	자료형[]배열명 = null; // 무슨값을 넣을지 모르고 몇칸 만들지도 모를 때
	int[] ar = null;

new : Heap 메모리에 할당, 저장공간의 시작주소를 가져온다
null : 주소의 기본값(어떤 주소가 들어갈지 모를때 사용)

index
	배열을 생성할 때 각각의 저장공간에 자동으로 붙여지는 번호이다.
	0부터 순차적으로 증가하면서 부여된다. 배열의 이름이 한 개 이기 때문에 배열의 여러 저장공간에 접근할 수 없다.
	그렇기 때문에 index를 이용하여 저장공간에 접근한다.
	배열명[index]로 사용하고 배열명[index]는 하나의 저장공간이므로 변수처럼 사용한다.

length
	배열을 생성할 때 자동으로 생성되는 저장공간의 수(배열의 길이)
	배열의 길이는 한번 만들어지면 변동될 수 없으므로 length는 상수라고 볼 수 있다.
	배열명.length로 사용한다.

배열의 사용
	int[] arData = {4,3,2,1}

	arDate[0] = 10;

	arData[2]+9;
	arData[3] = arData[0];
	arData[2] = arDate[0]+arData[1];
	
	int data = arData[3];

2차원 배열
	배열안에 배열이 하나 더 있는 것
2차원 배열 선언
	자료형[][] 배열명 = new 자료형[행][열]
	자료형[][] 배열명 = {{값1,값2,...}{값1,값2,....}...}
2차원 배열의 길이
	arrData.length : 행의 길이
	arrData[i].length : 열의 길이

함수와 메소드
	클래스 밖에 선언되어 있다면 함수라고 부르지만 클래스 내부에 선언되어 있는 함수는 메소드라고 부른다.
	자바에서는 모든 함수가 클래스 내부에서 선언되기 때문에 메소드만 존재한다.
	개념 상 함수가 메소드보다 더 큰 범주이므로 메소드를 함수라고 불러도 되지만,
	자바는 메소드만 존재하므로 메소드라고 부른다.

메소드
	기능
	이름 뒤에 소괄호()
	단 키워드 뒤에 소괄호는 메소드가 아니다.

메소드의 선언 순서
	1. 기능을 생각한다.
	2. 기능에 알맞는 메소드 명을 생각한다. (가능하면 동사로 add, sum, plus)
	3. 반환타입이 생각나지 않으면 우선 void로 작성한다.
		void add(){}
	4. 매개변수를 생각한다.(생각나지 않으면 비워둔다.)
		void add(int num1, int num2){}
	5. 실행 할 문장을 작성한다.
		void add(int num1, int num2){
			int result = num1 + num2;
		}
	6. 리턴 값을 생각한다.
		int add(int num1, int num2){
			int result = num1 + num2;
			return result; 		
		}
메소드 추가설명
	1. return 타입이 있는 경우 하나의 값으로 볼 수 있다.
	2. 메소드는 기능을 저장하는 것이라고 볼 수 있다.

메소드를 사용하는 이유
	1. 중복된 코드의 제거
	2. 높은 재사용성
	3. 코드를 작게 쪼개서 만들 수 있다.

((x+2)*3+3)+(x+2)*3)-((x+2)*3*2)
myfunction(x) = (x+2)*3
(myFunction(3)+3)+myFunction(3))-(myFunction(3)*2)
 
메소드의 종류
	매개 변수	리턴값(반환값)
1.	   x              x
2.       o              x
3.       x              o
4.       o              o