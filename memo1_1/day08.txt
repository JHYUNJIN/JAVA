받는 쪽 : 매개변수 , parameter
보내는 쪽 : 인수, 인자, argument

객체지향언어의 특징 : 
유지보수가 편하다.
중복된 코드가 최소화 되어야 하는데 메소드를 사용한다.
재사용성이 높아야 하기에 중복된 부분을 메소드를 만들고
클래스를 만들고 클래스에서 상속을 받아 최소화 시켜야한다.

다형성(polymorphism)
1. 오버로딩
2. 오버라이딩 (재정의) 
	부모 클래스에서 정의한 메소드를 자식 클래스에서 수정해서 사용하고 싶다면 오버라이딩을 하면 된다.
	이 때, 메소드명, 매개변수, 반환타입은 부모의 메소드와 동일해야한다.

오버로딩 = 같은 클래스 내에서 생성자 또는 메소드를 같은 이름으로 매개변수의 타입이나 갯수만 다르게 만든다.
	반환 타입은 오버로딩에 영향을 주지 않는다.

오버라이딩 = 상속 관계를 맺은 자식클래스에서 부모클래스의 메소드를 재정의 한다.
	반환타입, 이름, 매개변수 까지 동일해야 한다.

RPG 게임
	1.마법사			2.전사			3.로그(도적)
	HP/MP				HP/MP			HP/MP
	15/30				30/10			20/20

1.일반공격
	1만큼 피해			5만큼 피해		3만큼 피해
	HP-2							MP-3	

2.스킬공격
	30만큼 피해			15만큼 피해		20만큼 피해
	MP-10				MP-3			HP-5, MP-2

3.필살기(특수공격)
	3초동안 기라렸다가		5초동안 기다림	1초동안 기다림
	100 피해			100피해		20~100 랜덤 피해
	MP,HP -10			HP-10			

HP가 0이면 부활(HP,MP 가득 찬 상태로)
MP가 스킬 사용하기 위한 값보다 적으면 스킬 사용 불가능

Casting
	up casting : 자식 값을 부모 타입으로 형변환
	down casting : 업캐스팅 된 객체를 자식타입으로 형변환
	※ 부모 값을 자식 타입으로 형변환 시 오류

casting을 사용하는 이유
	모든 자식 값을 전달받기 위해서는 동일한 타입의 저장공간으로 받아야한다.
	하지만 자식기리는 서로 타입이 다르기 떄문에 한번에 전달받을 수 가 없다
	이 때 업캐스팅을 사용하면 모든 자식이 부모타입이므로 하나의 저장공간에 
	모든 자식을 받을 수 있게 된다.
	만약 업 캐스팅으로 자식 값을 전달 받았다면 자식에서 새롭게 구현한 기능들은
	사용할 수 없기 때문에 다운캐스팅을 통해 복구하고 사용한다.

객체간 타입비교
instanceof
a intanceof A : 조건식, 참 또는 거짓 중 하나가 나오는 식
-a가 A타입이면 true
-a가 A타입이 아니면 false
